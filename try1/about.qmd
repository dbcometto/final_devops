---
title: "About"
format:
  html:
    code-fold: true
---

This site was created by C2C Ben Cometto for the Math 378 Stats Final Project.  It is all build with docker compose, and runs with wizardy... not to be confused with magic.

![ChatGPT-Generated Penguins](gpt-penguins4.png)

## Docker Compose

Docker compose is a system that allows multiple docker containers to be started simultaneously.  For this project, the `docker-compose.yml` file is as follows.

```{{yml}}
services:
  api:
    hostname: myapi
    image: devops-api
    command: python runapi.py
    ports:
      - 8080:8080

  app:
    hostname: myapp
    image: devops-app
    command: python app-log.py
    ports:
      - 8090:8090

  web:
    image: devops-web
    ports:
      - 8095:80
    volumes:
      - ./docs:/usr/share/nginx/html
```

There are three separate docker containers: the API, the app, and the website.  Each has a different image (that I build with three more individual Dockerfiles.),  The `docker-compose.yml` file creates a network and automatically works the containers together, as can be seen below in Docker Desktop.

![Docker Desktop](docker-desktop.png)

## Dockerfiles

As an example of a Dockerfile, below is the file for the API.

```{{yml}}
FROM python:3.11-slim
COPY . /opt/app
WORKDIR /opt/app
RUN python -m pip install --upgrade pip && pip install -r ./requirements.txt
EXPOSE 8080
CMD ["python","runapi.py"]
```

The docker container starts with a slim Python image, copies in the script, installs the requirements, then runs the API.

The app dockerfile is essentially the same.

```{{yml}}
FROM python:3.11-slim
COPY . /opt/app
WORKDIR /opt/app
RUN python -m pip install --upgrade pip && pip install -r ./requirements.txt
EXPOSE 8090
CMD ["python","app-log.py"]
```

And below, the file for the static website container.

```{{yml}}
FROM nginx:alpine
RUN rm /etc/nginx/conf.d/default.conf && rm /etc/nginx/nginx.conf
COPY default.conf /etc/nginx/conf.d
COPY nginx.conf  /etc/nginx/nginx.conf
```

Here, the container starts with an `nginx` image.  It deletes the default configs and replaces them with the ones I created (but, didn't change.  I was troubleshooting... and cookies turned out to be the problem).  This container doesn't work without the docker-compose, as it requires a volume to be created to access the static website files.

## Summary of Function

Big picture, the static website is hosted on port `8095`, and the app is hosted on port `8090`.  The static website has a link to the app.  They're both simultaneously hosted, but not truly the same thing.  The links are unfortunately a little janky, as the app is not truly part of the static website.  Future improvements would link these together, or at least make the theme consistent throughout.

To access the files for the project, or to get a better understanding of what is happening, the github is available [here](https://github.com/dbcometto/final_devops){target="_blank"}.