---
title: "About"
format:
  html:
    code-fold: true
---

This site was created by C2C Ben Cometto for the Math 378 Stats Final Project.  It is all build with Docker compose, and runs with wizardy... not to be confused with magic.

![ChatGPT-Generated Penguins](gpt-penguins4.png)

## Docker Compose

Docker compose is a system that allows multiple Docker containers to be started simultaneously.  For this project, the `docker-compose.yml` file is as follows.

```{{yml}}
version: '3'

services:

  api:
    hostname: myapi
    build: ./api
    image: devops-api
    command: python runapi.py
    networks:
      - slide

  app:
    hostname: myapp
    build: ./app
    image: devops-app
    command: python app-log.py
    networks:
     - slide

  webserver:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
      - 8443:8443
    restart: always
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf:/etc/nginx/ssl/
    networks:
      - slide

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - slide

  web:
    hostname: webapp
    build: ./web
    image: devops-web
    volumes:
      - ./docker-volumes/docs:/usr/share/nginx/html
    networks:
      - slide

networks:
  slide:
    driver: bridge
```

There are five separate Docker containers: the API, the app, the website, the web server, and the certificate bot.  Each has a different image, three of which I build with individual Dockerfiles.  I also create a network so all of the containers can work together, and a few volumes so files are persistent.

## Dockerfiles

The first Dockerfile, for the API, is below.

```{{Dockerfile}}
FROM python:3.11-slim
COPY . /opt/app
WORKDIR /opt/app
RUN python -m pip install --upgrade pip && pip install -r ./requirements.txt
EXPOSE 8080
CMD ["python","runapi.py"]
```

The Docker container starts with a slim Python image, copies in the script, installs the requirements, then runs the API.

The app Dockerfile is essentially the same.

```{{Dockerfile}}
FROM python:3.11-slim
COPY . /opt/app
WORKDIR /opt/app
RUN python -m pip install --upgrade pip && pip install -r ./requirements.txt
EXPOSE 8090
CMD ["python","app-log.py"]
```

And below is the file for the static website container.

```{{Dockerfile}}
FROM nginx:alpine
RUN rm /etc/nginx/conf.d/default.conf && rm /etc/nginx/nginx.conf
COPY default.conf /etc/nginx/conf.d
COPY nginx.conf  /etc/nginx/nginx.conf
```

Here, the container starts with an `nginx` image.  It deletes the default configs and replaces them with the ones I created (but, didn't change.  I was troubleshooting... and cookies turned out to be the problem).  This container doesn't work without Docker compose, as it requires a volume to be created to access the static website files.

## HTTPS Function

The website is able to use HTTPS through an `nginx` webserver and a `certbot`.  A configuration file of the `nginx` webserver is below.

```{{conf}}
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    listen [::]:80;

    server_name devops.cometto.org;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://devops.cometto.org$request_uri;
    }
}

server {
    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;

    server_name devops.cometto.org;

    ssl_certificate /etc/nginx/ssl/live/devops.cometto.org/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/devops.cometto.org/privkey.pem;

    location / {
    	proxy_pass http://webapp:80;
    }
}

server {
    listen 8443 default_server ssl http2;
    listen [::]:8443 ssl http2;

    server_name devops.cometto.org;

    ssl_certificate /etc/nginx/ssl/live/devops.cometto.org/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/devops.cometto.org/privkey.pem;

    location / {
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto $scheme;
    	proxy_pass http://myapp:8090;
        proxy_read_timeout  20d;
        proxy_buffering off; 

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_http_version 1.1;

        proxy_redirect      / $scheme://$host/;   
    }
}
```

It sets up three servers.  One listens on Port `80` for the `certbot`.  Another listens on port `443`, which is the standard port for HTTPS.  If it passes the SSL certificate, it is passed to the website.  The third server listens on port `8443`, and passes HTTPS traffic to the prediction app.

## DNS

The domain name is owned by my family, and I was able to have it set up that devops.cometto.org pointed to this virtual machine.  HTTPS in the web browser automatically asks for port `443`.

## Overall Function

Overall, the website runs on a virtual machine, is set up using Docker compose, and hosts a static website, an API, and the prediction app.  To access the files for the project, or to get a better understanding of what is happening, the github is available [here](https://github.com/dbcometto/final_devops){target="_blank"}.